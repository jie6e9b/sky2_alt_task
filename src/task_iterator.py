from src.task import Task
from src.user import User


class TaskIterator:
    """Класс для перебора задач пользователя"""

    def __init__(self, user_obj):
        self.user = user_obj  # Экземпляр класса User
        self.index = 0  # Переменная для перебора элементов последовательности (т.к. геттер `task_in_list` из класса User - это список)
        # При создании объекта класса начальное значение индекса устанавливается на первый элемент последовательности


    def __iter__(self):
        """Для создания итератора с последовательностью объектов класса Task"""
        self.index = 0  # При каждом создании итератора индекс начинается с нуля (обнуляется)
        return self


    def __next__(self):
        """Для получения следующего элемента последовательности"""
        if self.index < len(self.user.task_in_list):  # Пока текущий индекс меньше длины списка задач
        # (т.е. кол-ва задач), выполняется перебор и возврат очередного значения элемента последовательности
            task = self.user.task_in_list[self.index]  # Возвращаем очередную задачу согласно номеру текущего индекса
            self.index += 1
            return task

        else:
            raise StopIteration  # При окончании перебора всего списка итератора нужно безопасно выйти из него


if __name__== "__main__":
    # Создаем 4 новых задачи
    task_1 = Task("Купить огурцы", "Купить огурцы для салата")
    task_2 = Task("Купить помидоры", "Купить помидоры для салата")
    task_3 = Task("Купить лук", "Купить лук для салата")
    task_4 = Task("Купить перец", "Купить перец для салата")

    # Создаем 1 нового пользователя
    user = User("OleJik", "oleg@mail.com", "Oleg", "Ivanov", [task_1, task_2, task_3, task_4])

    iterator = TaskIterator(user)  # Создание итератора задач для пользователя `user`
    for task in iterator:  # Последовательно вызываются методы def __iter__(self) и def __next__(self)
        print(task)  # Т.к. для класса Task написан магический метод def __str__(self), при выводе экземпляра класса
        # возвращается строка, форма которой описана в методе __str__ класса Task
        # (например, "Купить огурцы, Статус выполнения: Ожидает старта, Дата создания: 26.04.2025")